> library("neuralnet")
> 
> #Going to create a neural network to perform prediction
> #Type ?neuralnet for more information on the neuralnet library
> 
> #Generate training data
> #And store them as a dataframe
> traininginput <- as.data.frame(matrix(c(24.3,100-25600,1,
+                                         16.3,100-25600,1,
+                                         10.2,160-51200,0,
+                                         24.3,100-25600,1,
+                                         16.0,200-25600,1,
+                                         16.0,200-25600,0,
+                                         16.0,200-25600,1,
+                                         16.0,200-25600,1,
+                                         24.2,100-51200,1,
+                                         18.84,100-25600,0,
+                                         16.0,200-25600,1,
+                                         24.3,100-25600,0,), nrow=12, ncol=3))
Error in c(24.3, 100 - 25600, 1, 16.3, 100 - 25600, 1, 10.2, 160 - 51200,  : 
  argument 37 is empty
> trainingoutput <- c(269, 379, 349, 299, 299, 160, 499, 259, 2699, 419, 269, 489, 189, 369, 319, 399, 200, 269, 159, 419)
> 
> #Column bind the data into one variable
> trainingdata <- cbind(traininginput, trainingoutput)
> 
> # Create Vector of Column Max and Min Values
> maxs <- apply(trainingdata[,], 2, max)
> mins <- apply(trainingdata[,], 2, min)
> 
> # Use scale() and convert the resulting matrix to a data frame
> scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
> trainingdata <- scaled.trainingdata
> 
> # Check out results
> print(head(trainingdata, 10))
               V1            V2            V3  trainingoutput
1  0.788519637462 0.36868686869 0.06060606061 0.0433070866142
2  0.027190332326 0.49494949495 0.59595959596 0.0866141732283
3  0.425981873112 0.03282828283 0.93265993266 0.0748031496063
4  0.758308157100 0.36868686869 0.08080808081 0.0551181102362
5  0.006042296073 1.00000000000 0.52861952862 0.0551181102362
6  0.395770392749 0.43939393939 1.00000000000 0.0003937007874
7  0.607250755287 0.29292929293 0.02020202020 0.1338582677165
8  0.000000000000 0.19191919192 0.42760942761 0.0393700787402
9  0.395770392749 0.22979797980 0.73063973064 1.0000000000000
10 0.697885196375 0.44444444444 0.09090909091 0.1023622047244
> 
> colnames(trainingdata) <- c("Resolution", "RangeSensitivity", "Lens", "Price") 
> print(trainingdata)
       Resolution RangeSensitivity          Lens           Price
1  0.788519637462    0.36868686869 0.06060606061 0.0433070866142
2  0.027190332326    0.49494949495 0.59595959596 0.0866141732283
3  0.425981873112    0.03282828283 0.93265993266 0.0748031496063
4  0.758308157100    0.36868686869 0.08080808081 0.0551181102362
5  0.006042296073    1.00000000000 0.52861952862 0.0551181102362
6  0.395770392749    0.43939393939 1.00000000000 0.0003937007874
7  0.607250755287    0.29292929293 0.02020202020 0.1338582677165
8  0.000000000000    0.19191919192 0.42760942761 0.0393700787402
9  0.395770392749    0.22979797980 0.73063973064 1.0000000000000
10 0.697885196375    0.44444444444 0.09090909091 0.1023622047244
11 0.015105740181    0.11616161616 0.42760942761 0.0433070866142
12 0.305135951662    0.00000000000 0.59595959596 0.1299212598425
13 0.667673716012    0.44444444444 0.06734006734 0.0118110236220
14 0.048338368580    0.97474747475 0.59595959596 0.0826771653543
15 0.365558912387    0.12929292929 0.05723905724 0.0629921259843
16 0.546827794562    0.39393939394 0.00000000000 0.0944881889764
17 0.000000000000    0.46969696970 0.56228956229 0.0161417322835
18 0.305135951662    0.01085858586 1.00000000000 0.0433070866142
19 1.000000000000    0.39393939394 0.02020202020 0.0000000000000
20 0.096676737160    0.44444444444 0.42760942761 0.1023622047244
> 
> #Train the neural network
> #Going to have C(5, 4, 3) hidden layers
> #Threshold is a numeric value specifying the threshold for the partial
> #derivatives of the error function as stopping criteria.
> net.price <- neuralnet(Price~Resolution+RangeSensitivity+Lens, trainingdata, hidden=c(5, 4, 3), threshold=0.001)
> print(net.price)
$call
neuralnet(formula = Price ~ Resolution + RangeSensitivity + Lens, 
    data = trainingdata, hidden = c(5, 4, 3), threshold = 0.001)

$response
             Price
1  0.0433070866142
2  0.0866141732283
3  0.0748031496063
4  0.0551181102362
5  0.0551181102362
6  0.0003937007874
7  0.1338582677165
8  0.0393700787402
9  1.0000000000000
10 0.1023622047244
11 0.0433070866142
12 0.1299212598425
13 0.0118110236220
14 0.0826771653543
15 0.0629921259843
16 0.0944881889764
17 0.0161417322835
18 0.0433070866142
19 0.0000000000000
20 0.1023622047244

$covariate
                [,1]          [,2]          [,3]
 [1,] 0.788519637462 0.36868686869 0.06060606061
 [2,] 0.027190332326 0.49494949495 0.59595959596
 [3,] 0.425981873112 0.03282828283 0.93265993266
 [4,] 0.758308157100 0.36868686869 0.08080808081
 [5,] 0.006042296073 1.00000000000 0.52861952862
 [6,] 0.395770392749 0.43939393939 1.00000000000
 [7,] 0.607250755287 0.29292929293 0.02020202020
 [8,] 0.000000000000 0.19191919192 0.42760942761
 [9,] 0.395770392749 0.22979797980 0.73063973064
[10,] 0.697885196375 0.44444444444 0.09090909091
[11,] 0.015105740181 0.11616161616 0.42760942761
[12,] 0.305135951662 0.00000000000 0.59595959596
[13,] 0.667673716012 0.44444444444 0.06734006734
[14,] 0.048338368580 0.97474747475 0.59595959596
[15,] 0.365558912387 0.12929292929 0.05723905724
[16,] 0.546827794562 0.39393939394 0.00000000000
[17,] 0.000000000000 0.46969696970 0.56228956229
[18,] 0.305135951662 0.01085858586 1.00000000000
[19,] 1.000000000000 0.39393939394 0.02020202020
[20,] 0.096676737160 0.44444444444 0.42760942761

$model.list
$model.list$response
[1] "Price"

$model.list$variables
[1] "Resolution"       "RangeSensitivity" "Lens"            


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x0000000014b8b518>
<environment: 0x0000000012779eb8>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x0000000007b80b30>
<environment: 0x0000000012779eb8>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
       Resolution RangeSensitivity          Lens           Price
1  0.788519637462    0.36868686869 0.06060606061 0.0433070866142
2  0.027190332326    0.49494949495 0.59595959596 0.0866141732283
3  0.425981873112    0.03282828283 0.93265993266 0.0748031496063
4  0.758308157100    0.36868686869 0.08080808081 0.0551181102362
5  0.006042296073    1.00000000000 0.52861952862 0.0551181102362
6  0.395770392749    0.43939393939 1.00000000000 0.0003937007874
7  0.607250755287    0.29292929293 0.02020202020 0.1338582677165
8  0.000000000000    0.19191919192 0.42760942761 0.0393700787402
9  0.395770392749    0.22979797980 0.73063973064 1.0000000000000
10 0.697885196375    0.44444444444 0.09090909091 0.1023622047244
11 0.015105740181    0.11616161616 0.42760942761 0.0433070866142
12 0.305135951662    0.00000000000 0.59595959596 0.1299212598425
13 0.667673716012    0.44444444444 0.06734006734 0.0118110236220
14 0.048338368580    0.97474747475 0.59595959596 0.0826771653543
15 0.365558912387    0.12929292929 0.05723905724 0.0629921259843
16 0.546827794562    0.39393939394 0.00000000000 0.0944881889764
17 0.000000000000    0.46969696970 0.56228956229 0.0161417322835
18 0.305135951662    0.01085858586 1.00000000000 0.0433070866142
19 1.000000000000    0.39393939394 0.02020202020 0.0000000000000
20 0.096676737160    0.44444444444 0.42760942761 0.1023622047244

$net.result
$net.result[[1]]
              [,1]
1   0.046690821795
2   0.066052747774
3   0.075783198122
4   0.058759323831
5   0.061739057181
6   0.002521914467
7   0.119147259358
8   0.054885295322
9   0.999020894488
10  0.060712028857
11  0.034125391083
12  0.130338398960
13  0.064627980212
14  0.061591616483
15  0.066193185253
16  0.096768615065
17  0.066404418133
18  0.045382653408
19 -0.005602202789
20  0.072763703850


$weights
$weights[[1]]
$weights[[1]][[1]]
              [,1]           [,2]          [,3]           [,4]         [,5]
[1,]  -3.660564291  -0.4001113285 -0.1191883379  -0.3307224500 -3.283508780
[2,] -22.146072630  10.9511701530 -9.3498880612   0.3970748517  3.748516894
[3,]   9.846977761 -14.4940965598  3.2630313035 -14.6397991889  1.598246282
[4,]  27.601905567   4.5475971415  3.6450491020   2.0366585307 -1.245527808

$weights[[1]][[2]]
               [,1]          [,2]           [,3]          [,4]
[1,]  -1.7789648922  0.1845126353  0.05374268075  0.4710778845
[2,]   6.2099414820 -1.2239617372  0.26813927370 -1.6595252104
[3,]   0.5342833277  2.3462211017 -0.92553473897 -2.8067086756
[4,] -10.8957293745  0.2502914676  7.31655301625  3.9535477974
[5,]  -6.9837190524 -2.3083363356  0.18914933809  3.9585487710
[6,]  -3.4138154394  1.6241300221  5.58957469085 17.0811739877

$weights[[1]][[3]]
              [,1]          [,2]           [,3]
[1,] -0.8765725173 -1.4324862586  -1.1420529945
[2,] -9.8537953428 -8.8580174912 -33.5781951842
[3,]  0.7157749525 -1.0048835601   2.6818117099
[4,]  0.2573025080 -1.5604607296   0.1437862087
[5,] -0.5754911351 -0.5195257543   3.4641332413

$weights[[1]][[4]]
               [,1]
[1,]  1.01726235968
[2,] -1.04668195569
[3,] -0.04344800111
[4,] -0.68780294925



$startweights
$startweights[[1]]
$startweights[[1]][[1]]
              [,1]           [,2]          [,3]           [,4]           [,5]
[1,]  1.0544466499  1.26532422480 -1.4923974099 -0.40033656975  0.08746003084
[2,] -0.9988741216 -0.08458111162 -1.6762534593 -0.48869905521  1.19272643780
[3,] -1.7286164927  0.06255351657  0.7724859251 -0.08775886145 -0.70860399100
[4,]  0.8387725599 -0.51219570660  0.0289619585  0.17854559686 -0.35779771254

$startweights[[1]][[2]]
              [,1]         [,2]          [,3]          [,4]
[1,] -1.8682960135 0.2486140923  0.1307649452  0.8521854669
[2,]  1.7903495613 0.8906965840  0.5781244085 -0.3828626888
[3,]  0.3523595856 1.4344114554 -0.8479677053 -0.5717459333
[4,] -1.5978232923 0.8143732712 -0.2906062484 -1.7296551382
[5,] -0.2269780969 0.5135542801 -0.8611337546  1.6841321806
[6,] -0.7041076039 1.5183060624 -0.1154721149  2.0351683371

$startweights[[1]][[3]]
              [,1]          [,2]          [,3]
[1,] -0.8087577993 -0.5063853770 -1.0713076262
[2,] -1.0059861964  0.2734302736 -0.9947719368
[3,]  0.6272881989 -0.5014603309  1.1069543902
[4,]  0.3240800687 -0.5564257762  0.2278199859
[5,] -0.5539147192  0.1748938659  0.9116168324

$startweights[[1]][[4]]
               [,1]
[1,]  0.59296572098
[2,] -1.07393705874
[3,] -0.08123147929
[4,] -0.73941661162



$generalized.weights
$generalized.weights[[1]]
              [,1]            [,2]            [,3]
1   -7.00691301104  -2.98397528357    2.4331603614
2   -0.07905481715   0.04220577291   -0.1421553378
3   13.50130524412  -0.84680304338   -6.0239862480
4   -6.03371895234  -2.86020908594    2.1504530151
5   -0.37522837724  -0.19966240611    0.1216612748
6  376.53334897367 -98.27967275899 -177.1106524472
7   -3.39217803179  -1.75731748202    1.2932299636
8   -3.01036803057   3.74326377769   -2.3205212001
9  982.72657570141  43.75017211797 -445.5208454136
10  -4.12554779599  -4.87797135189    2.1937550821
11  -9.09888490905   5.96225873215   -4.4573836107
12  20.79772148806   7.70118655026  -10.3452285426
13  -3.61092404521  -4.87443351680    2.0079453705
14  -0.37690686223  -0.21082172068    0.1212878682
15   6.76406338394  15.09753278141   -5.6037146265
16  -1.66305117640  -3.71278189510    0.7680812132
17  -0.05988783876   0.02311400074   -0.1330149636
18   0.67915185276  -6.00266349932    0.5713477096
19  25.18316084982   8.12526610425   -8.0727876349
20   1.64662272460  -0.50714638433   -0.9630552384


$result.matrix
                                             1
error                          0.0047309479932
reached.threshold              0.0009254364317
steps                        610.0000000000000
Intercept.to.1layhid1         -3.6605642914371
Resolution.to.1layhid1       -22.1460726298417
RangeSensitivity.to.1layhid1   9.8469777605505
Lens.to.1layhid1              27.6019055672921
Intercept.to.1layhid2         -0.4001113284548
Resolution.to.1layhid2        10.9511701530369
RangeSensitivity.to.1layhid2 -14.4940965598307
Lens.to.1layhid2               4.5475971415062
Intercept.to.1layhid3         -0.1191883379208
Resolution.to.1layhid3        -9.3498880612087
RangeSensitivity.to.1layhid3   3.2630313035410
Lens.to.1layhid3               3.6450491019974
Intercept.to.1layhid4         -0.3307224500015
Resolution.to.1layhid4         0.3970748517426
RangeSensitivity.to.1layhid4 -14.6397991889067
Lens.to.1layhid4               2.0366585306659
Intercept.to.1layhid5         -3.2835087804505
Resolution.to.1layhid5         3.7485168936899
RangeSensitivity.to.1layhid5   1.5982462817047
Lens.to.1layhid5              -1.2455278076294
Intercept.to.2layhid1         -1.7789648922366
1layhid.1.to.2layhid1          6.2099414820490
1layhid.2.to.2layhid1          0.5342833277112
1layhid.3.to.2layhid1        -10.8957293745444
1layhid.4.to.2layhid1         -6.9837190524468
1layhid.5.to.2layhid1         -3.4138154394250
Intercept.to.2layhid2          0.1845126352992
1layhid.1.to.2layhid2         -1.2239617371736
1layhid.2.to.2layhid2          2.3462211017145
1layhid.3.to.2layhid2          0.2502914675506
1layhid.4.to.2layhid2         -2.3083363355624
1layhid.5.to.2layhid2          1.6241300220880
Intercept.to.2layhid3          0.0537426807455
1layhid.1.to.2layhid3          0.2681392737005
1layhid.2.to.2layhid3         -0.9255347389700
1layhid.3.to.2layhid3          7.3165530162522
1layhid.4.to.2layhid3          0.1891493380934
1layhid.5.to.2layhid3          5.5895746908543
Intercept.to.2layhid4          0.4710778844525
1layhid.1.to.2layhid4         -1.6595252104020
1layhid.2.to.2layhid4         -2.8067086756435
1layhid.3.to.2layhid4          3.9535477974004
1layhid.4.to.2layhid4          3.9585487709955
1layhid.5.to.2layhid4         17.0811739877045
Intercept.to.3layhid1         -0.8765725173427
2layhid.1.to.3layhid1         -9.8537953427674
2layhid.2.to.3layhid1          0.7157749524534
2layhid.3.to.3layhid1          0.2573025079749
2layhid.4.to.3layhid1         -0.5754911350611
Intercept.to.3layhid2         -1.4324862586196
2layhid.1.to.3layhid2         -8.8580174911725
2layhid.2.to.3layhid2         -1.0048835600801
2layhid.3.to.3layhid2         -1.5604607295819
2layhid.4.to.3layhid2         -0.5195257543162
Intercept.to.3layhid3         -1.1420529945214
2layhid.1.to.3layhid3        -33.5781951841787
2layhid.2.to.3layhid3          2.6818117099060
2layhid.3.to.3layhid3          0.1437862086758
2layhid.4.to.3layhid3          3.4641332413094
Intercept.to.Price             1.0172623596764
3layhid.1.to.Price            -1.0466819556855
3layhid.2.to.Price            -0.0434480011080
3layhid.3.to.Price            -0.6878029492495

attr(,"class")
[1] "nn"
> 
> #Plot the neural network
> plot(net.price)
> 
> #Test the neural network on some training data
> testdata <- as.data.frame(matrix(c(262, 64, 28,
+                                    206, 75, 16,
+                                    361, 56, 20), nrow=3, ncol=3))
> scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
> net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
> 
> #Lets see what properties net.price has
> ls(net.results)
[1] "net.result" "neurons"   
> 
> #Lets see the results
> print(net.results$net.result)
            [,1]
[1,] 1.017078292
[2,] 1.017020932
[3,] 1.015640236